<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace的值就是dao接口的完整路劲，就这个demo而言namespace 就是userDao.java的完整路劲 -->
<mapper namespace="com.learn.dao.UserDao">
	<!--通过<resultMap>映射实体类属性名和表的字段名对应关系 -->
	<resultMap type="com.learn.model.User" id="userMap">
		<!-- 用id属性来映射主键字段 -->
		<id property="id" column="id" />
		<!-- 用result属性来映射非主键字段 -->
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="photoPath" column="photo_path" />
		<result property="userDzone" column="user_dzone" />
	</resultMap>

	<!-- 这里的id就是接口中方法的名称 -->
	<insert id="saveUser" parameterType="com.learn.model.User">
		insert into t_user(user_id,user_name,password)values(#{userId},#{userName},#{password})
	</insert>
	<select id="getAllUser" resultMap="userMap">
		select * from t_user
	</select>
	<delete id="delUserById" parameterType="Integer">
		delete from t_user where
		id = #{id}
	</delete>
	<update id="updateUserById" parameterType="com.learn.model.User">
		update t_user set
		user_name=#{userName} , password=#{password}, photo_path=#{photoPath} where id=#{id}
	</update>
	<select id="getUserById" parameterType="Integer" resultMap="userMap">
		select * from t_user where id=#{id}
	</select>
	<update id ="uploadPhoto" parameterType="com.learn.model.User">
		update t_user set
		photo_path=#{photoPath} where id=#{id}
	</update>
	<select id="getUserByName" parameterType="string" resultMap="userMap">
		select * from t_user where user_name=#{userName} and password=#{password}
	</select>
</mapper>  