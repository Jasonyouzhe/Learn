<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace的值就是dao接口的完整路劲，就这个demo而言namespace 就是userDao.java的完整路劲 -->
<mapper namespace="com.learn.dao.UserDao">
	<!--通过<resultMap>映射实体类属性名和表的字段名对应关系 -->
	<resultMap type="com.learn.model.User" id="userMap">
		<!-- 用id属性来映射主键字段 -->
		<id property="id" column="id" />
		<!-- 用result属性来映射非主键字段 -->
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="photoPath" column="photo_path" />
		<result property="userDzone" column="user_dzone" />
	</resultMap>
	
	<resultMap type="com.learn.model.User" id="userRolePerMap">
		<!-- 用id属性来映射主键字段 -->
		<id property="id" column="id" />
		<!-- 用result属性来映射非主键字段 -->
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="photoPath" column="photo_path" />
		<result property="userDzone" column="user_dzone" />
		<collection property="roles" ofType="com.learn.model.Role">
			<result property="roleName" column="role_name" />
			<result property="roleDescription" column="role_description" />
			<collection property="permissions" ofType="com.learn.model.Permissions">
				<result property="permissionsName" column="permissions_name" />
				<result property="permissionsDescription" column="permissions_description" />
		 	</collection>
         </collection>
	</resultMap>
	
	<!-- get userRole start 20171216-->
	<resultMap type="com.learn.model.User" id="resultUserRole">
		<id property="id" column="id" />
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<collection property="roles" column="user_name" javaType="java.util.ArrayList"
		 select="getUserRoleById">
		</collection>
	</resultMap>
	
	<resultMap type="com.learn.model.Role" id="resultRoleMap">
		<id property="id" column="id" />
		<result property="roleName" column="role_name" />
		<result property="roleDescription" column="role_description" />
			<collection property="permissions" ofType="com.learn.model.Permissions">
		 		<id property="id" column="id" />
				<result property="permissionsName" column="permissions_name" />
				<result property="permissionsDescription" column="permissions_description" />
		 	</collection>
	</resultMap>
	
	<resultMap type="com.learn.model.Permissions" id="resultPermissioinsMap">
		<id property="id" column="id" />
		<result property="permissionsName" column="permissions_name" />
		<result property="permissionsDescription" column="permissions_description" />
	</resultMap>
	
	<select id="getUserRolePerByUserName" resultMap="resultUserRole" parameterType="string" >
	    select id,user_id,user_name from t_user where user_name = #{userName}
	    <!-- 这是一对多sql -->
	    <!-- select u.id,u.user_name,r.role_name,r.role_description from t_user u,t_role r ,t_user_role ur where u.id = ur.user_id and r.id = ur.role_id and u.id = #{id} -->
	</select>

	<select id="getUserRoleById" resultMap="resultRoleMap" parameterType="string" >
		SELECT 
		    ur.role_id,
		    r.role_name,
		    p.permissions_name,
		    p.permissions_description
		FROM
		    t_user u
		        LEFT JOIN
		    t_user_role ur ON u.id = ur.user_id
		        LEFT JOIN
		    t_role r ON r.id = ur.role_id
		        LEFT JOIN
		    t_role_permissions rp ON ur.id = rp.role_id
		        LEFT JOIN
		    t_permissions p ON rp.permissions_id = p.id
		WHERE
		    u.user_name = #{user_name}
	</select>
	<!-- get userRole end 20171226-->
	
	<!-- 这里的id就是接口中方法的名称 -->
	<insert id="saveUser" parameterType="com.learn.model.User" useGeneratedKeys="true" keyProperty="id">
		insert into t_user(user_id,user_name,password)values(#{userId},#{userName},#{password})
	</insert>
	<select id="getAllUser" resultMap="userRolePerMap">
		SELECT 
		    u.id,
		    u.user_id,
		    u.user_name,
		    u.password,
		    u.photo_path,
		    u.user_dzone,
		    r.role_name,
		    r.role_description,
		    p.permissions_name,
		    p.permissions_description
		FROM
		    t_user u
		        LEFT JOIN
		    t_user_role ur ON u.id = ur.user_id
		        LEFT JOIN
		    t_role r ON r.id = ur.role_id
		        LEFT JOIN
		    t_role_permissions rp ON r.id = rp.role_id
		        LEFT JOIN
		    t_permissions p ON rp.permissions_id = p.id
	</select>
	
	<delete id="delUserById" parameterType="Integer">
		delete from t_user where
		id = #{id}
	</delete>
	<update id="updateUserById" parameterType="com.learn.model.User">
		update t_user set
		user_name=#{userName} , password=#{password}, photo_path=#{photoPath} where id=#{id}
	</update>
	<update id ="uploadPhoto" parameterType="com.learn.model.User">
		update t_user set
		photo_path=#{photoPath} where id=#{id}
	</update>
	<select id="getUserByName" parameterType="string" resultMap="userMap">
		select * from t_user where user_name=#{userName}
	</select>
	<select id="getUserById" parameterType="Integer" resultMap="userMap">
		select * from t_user where id=#{id}
	</select>
</mapper>  